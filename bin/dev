#!/usr/bin/env ruby
require 'open3'

class DevTool
  MAIN_HELP_BANNER = <<HEREDOC
Execute various commands within the developer environment

Usage:
  dev [COMMAND] [ARGS...]"
  dev -h|--help

Commands:
  compose            Manage containers (default)
  machine            Manage the virtual machine
  update             Update Dash developer environment

HEREDOC

  TOP_COMMANDS=%w{compose machine update dash}
  MACHINE_DNS_PROXY = %w{create kill restart rm start stop}

  def initialize(args)
    if args.empty?
      help
    elsif TOP_COMMANDS.include?(args[0])
      send(args.shift.to_sym, args)
    else
      send(:compose, args)
    end
  end

  def help
    puts MAIN_HELP_BANNER
  end

  def compose(args)
    if args.empty?
      puts `docker-compose --help`
    else
      args.unshift('docker-compose')
      system(args.join(' '))
    end
  end

  def machine(args)
    if args.empty?
      puts `docker-machine --help`
    elsif args.first == 'env'
      args.shift
      machine_name = 'default'
      unless args.first.nil?
        machine_name = args.first
      end
      if `docker-machine status #{machine_name}` =~ /Running/
        system("docker-machine env #{machine_name}")
      else
        $stderr.puts "#{machine_name} is not running"
      end
    elsif args.first == 'create'
      args.shift
      args.unshift("#{root_dir}/docker/start-dev.sh")
      system('sudo ls > /dev/null')
      system(args.join(' '))
      reload_dns
    elsif args.first == 'create-cluster'
      system('sudo ls > /dev/null')
      system("#{root_dir}/docker/start-cluster.sh")
      reload_dns
    elsif MACHINE_DNS_PROXY.include?(args.first)
      system('sudo ls > /dev/null')
      args.unshift('docker-machine')
      system(args.join(' '))
      reload_dns
    else
      args.unshift('docker-machine')
      system(args.join(' '))
    end
  end

  def reload_dns
    system('sudo pkill -HUP dnsmasq')
  end

  def update(args)
    #system('cd /usr/local/dev-env && git fetch && git reset --hard origin/master')
    system("ansible-playbook #{root_dir}/ansible/mac.yml -i 127.0.0.1, --ask-become-pass")
  end

  def dash(args)
    #system('brew services start dnsmasq')
  end

  def root_dir
    '/usr/local/dev-env'
  end

end

DevTool.new(ARGV) if __FILE__==$0
